#!/bin/bash -e

fail () {
	echo "$@" >&2
	exit 1
}

if [ "$#" -lt 1 -o "$#" -gt 2 ]; then
	fail "Usage: $0 <zig version> [snap channel]

Create Snap package(s) of an official Zig release
and (optionally) upload to the specified channel."
fi

script_dir=$(dirname $0)
zig_version=$1
snap_channel=$2
source='?source=jayschwa-snapcraft-zig'

cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}/snapcraft-zig
mkdir --parents $cache_dir

zig_download_json=$(
	curl --fail --silent https://ziglang.org/download/index.json$source |
	jq --exit-status ".\"$zig_version\""
) || fail "Missing info for $zig_version on https://ziglang.org"

zig_version=$(
	echo $zig_download_json |
	jq --raw-output ".version // \"$zig_version\""
)

if [ -n "$snap_channel" ]; then
	snap_version=$(
		snap info zig |
		grep $snap_channel: |
		awk '{print $2}'
	)
	[ -z "$snap_version" ] && fail "Snap channel $snap_channel not found"

	if [ "$snap_version" = "$zig_version" ]; then
		echo "Snap channel $snap_channel already has Zig $zig_version"
		exit
	fi

	snapcraft whoami --quiet || fail "Snapcraft is not logged in"
fi

mirrors=$(
	curl --fail --silent https://ziglang.org/download/community-mirrors.txt$source
) || fail "Failed to fetch list of community mirrors"

package_and_upload () {
	local zig_archive_url=$1
	local snap_arch=$2
	local archive_name=${zig_archive_url#https://ziglang.org/builds/}

	echo "Packaging $archive_name"

	local work_dir=$(mktemp --tmpdir --directory zig-to-snap-XXXXXX)
	trap "rm --recursive $work_dir" EXIT

	# Build list of mirror URLs.
	local mirrored_archive_urls=$(echo "$mirrors" | awk -v path="/${archive_name}$source" '{print $0 path}')
	local mirrored_minisig_urls=$(echo "$mirrors" | awk -v path="/${archive_name}.minisig$source" '{print $0 path}')

	# This file enables aria2 to track server performance across downloads.
	local server_stats=$cache_dir/aria2-server-stats

	# Download Zig archive and signature from mirrors.
	aria2c --quiet --dir=$work_dir --out=archive \
		--server-stat-if=$server_stats --server-stat-of=$server_stats \
		$mirrored_archive_urls $zig_archive_url$source ||
			fail "Download failed: $archive_name"	
	aria2c --quiet --dir=$work_dir --out=archive.minisig \
		--server-stat-if=$server_stats --server-stat-of=$server_stats \
		$mirrored_minisig_urls $zig_archive_url.minisig$source ||
			fail "Download failed: $archive_name.minisig"

	# Verify and extract archive to staging directory.
	minisign -V -p $script_dir/minisign.pub -m $work_dir/archive -o |
	tar --extract --xz --strip-components=1 --one-top-level=$work_dir/staging ||
		fail "Archive is corrupt: $archive_name"

	# Add Snap metadata.
	mkdir --parents $work_dir/staging/meta
	VERSION=$zig_version ARCH=$snap_arch envsubst < $script_dir/snap.yaml > $work_dir/staging/meta/snap.yaml

	local snap_file=$(
		snap pack $work_dir/staging |
		grep --only-matching '[[:graph:]]\+\.snap'
	)

	if [ -n "$snap_channel" ]; then
		echo "Uploading $snap_file"
		if ! snapcraft upload $snap_file --release $snap_channel --quiet; then
			echo "First upload attempt failed, waiting a moment before retrying..."
			sleep 60
			snapcraft upload $snap_file --release $snap_channel --quiet ||
				fail "Upload failed after multiple attempts: $snap_file"
		fi
		rm $snap_file
	else
		echo "Created $snap_file"
	fi
}

# Package and upload snaps for each architecture. The pair format is (Zig, Snap).
# Zig's architectures can be found by running the command `zig targets | jq .arch`.
# Snap's architectures can be found at https://github.com/snapcore/snapd/blob/master/arch/arch.go.
trap 'kill $(jobs -p) &>/dev/null; wait; exit 130' INT TERM
for arch_pair in \
	"x86 i386" \
	"x86_64 amd64" \
	"armv7a armhf" \
	"aarch64 arm64" \
	"powerpc powerpc" \
	"powerpc64 ppc64" \
	"powerpc64le ppc64el" \
	"riscv64 riscv64" \
	"s390x s390x" \
; do
	set -- $arch_pair
	zig_archive_url=$(
		echo $zig_download_json |
		jq --exit-status --raw-output ".\"$1-linux\".tarball"
	) || continue
	package_and_upload $zig_archive_url $2 &
done
wait
